import streamlit as st
import numpy as np # Ainda √∫til para algumas opera√ß√µes, mas n√£o para o modelo de ML
from collections import Counter
import pandas as pd # Ainda √∫til para manipula√ß√£o de dados e visualiza√ß√£o

# --- Fun√ß√µes de Ajuda ---
def resultado_para_numerico(resultado):
    """Converte 'C', 'V', 'E' para valores num√©ricos.
       Mantido para compatibilidade, mas pode ser removido se n√£o for mais necess√°rio."""
    if resultado == 'C': return 1 # Casa
    if resultado == 'V': return 2 # Visitante
    if resultado == 'E': return 0 # Empate
    return -1 # Caso de erro

def numerico_para_resultado(numero):
    """Converte n√∫meros para 'C', 'V', 'E'."""
    if numero == 1: return 'C'
    if numero == 2: return 'V'
    if numero == 0: return 'E'
    return '?'

# --- Fun√ß√µes de An√°lise ---

def detectar_padroes_inteligente(hist, janela_min=2, janela_max=4):
    """
    Detecta padr√µes de sequ√™ncias de resultados em diferentes tamanhos de janela
    e oferece uma recomenda√ß√£o mais ponderada.
    """
    if len(hist) < janela_max:
        return [], None, None

    todos_padroes = {} # Dicion√°rio para armazenar padr√µes por tamanho de janela
    # Ajuste para a √∫ltima sequ√™ncia para cobrir todas as janelas analisadas
    ultima_sequencia_maior = tuple(hist[-(janela_max-1):]) if janela_max > 1 else ()

    for janela in range(janela_min, janela_max + 1):
        if len(hist) < janela:
            continue
        sequencias = [tuple(hist[i:i+janela]) for i in range(len(hist) - janela + 1)]
        contagem = Counter(sequencias)
        # Filtra padr√µes que ocorrem mais de uma vez ou que s√£o muito frequentes
        # Padr√µes que ocorrem mais de 2 vezes OU s√£o mais de 25% das ocorr√™ncias
        padroes_encontrados = {seq: freq for seq, freq in contagem.items() if freq > 1 or (len(sequencias) > 0 and freq >= len(sequencias) * 0.25)}
        if padroes_encontrados:
            todos_padroes[janela] = padroes_encontrados

    recomendacao_candidatos = Counter()
    for janela, padroes_na_janela in todos_padroes.items():
        # A parte da sequ√™ncia final precisa ser ajustada para cada janela
        ult = tuple(hist[-(janela-1):]) if janela > 1 else ()

        for seq, freq in padroes_na_janela.items():
            if seq[:-1] == ult:
                # Pesa a recomenda√ß√£o pela frequ√™ncia e pelo tamanho da janela (maior janela, maior peso)
                recomendacao_candidatos[seq[-1]] += freq * janela

    sugestao = None
    confianca = 0.0

    if recomendacao_candidatos:
        sugestao, total_votos = recomendacao_candidatos.most_common(1)[0]
        # Calcular confian√ßa baseada na propor√ß√£o de votos do mais comum
        confianca = total_votos / sum(recomendacao_candidatos.values())

    # Formatar os padr√µes para exibi√ß√£o
    padroes_exibicao = []
    for janela in sorted(todos_padroes.keys()): # Ordenar para exibi√ß√£o consistente
        for p in todos_padroes[janela]:
            padroes_exibicao.append(f"{''.join(p)} (tam {janela})")

    return padroes_exibicao, sugestao, confianca

def prever_empate_estatistico(dados, janela_analise=10, tendencia_peso=0.5):
    """
    Prev√™ a chance de empate com base em estat√≠sticas simples:
    - Frequ√™ncia geral de empates nos √∫ltimos N jogos.
    - An√°lise de tend√™ncias (e.g., se houver muitos "CECE" ou "VEVE").
    """
    if len(dados) < 10: # M√≠nimo de dados para an√°lise estat√≠stica
        return 0.0, "Hist√≥rico muito curto para an√°lise estat√≠stica de empates."

    # Frequ√™ncia de empates nos √∫ltimos 'janela_analise' jogos
    ultimos_dados = dados[-janela_analise:]
    contagem_ultimos = Counter(ultimos_dados)
    frequencia_empate = (contagem_ultimos['E'] / len(ultimos_dados)) * 100 if ultimos_dados else 0.0

    # An√°lise de tend√™ncia (ex: "CE", "VE", "EC", "EV" nos √∫ltimos N jogos)
    # Procurar por padr√µes que possam indicar altern√¢ncia para empate
    tendencia_score = 0
    # Pontos para sequ√™ncias que terminam em E ou que s√£o de altern√¢ncia
    if len(dados) >= 2:
        if dados[-1] == 'E': # Se o √∫ltimo j√° foi empate, talvez menos prov√°vel (ou mais, dependendo do jogo)
            tendencia_score -= 10
        if dados[-1] == 'C' and dados[-2] == 'E': # Ex: EC
            tendencia_score += 5
        if dados[-1] == 'V' and dados[-2] == 'E': # Ex: EV
            tendencia_score += 5
        if dados[-1] == 'E' and dados[-2] == 'C': # Ex: CE
            tendencia_score += 10 # Forte ind√≠cio de altern√¢ncia
        if dados[-1] == 'E' and dados[-2] == 'V': # Ex: VE
            tendencia_score += 10 # Forte ind√≠cio de altern√¢ncia
    
    if len(dados) >= 3:
        if dados[-1] == 'C' and dados[-2] == 'E' and dados[-3] == 'C': # CEC
            tendencia_score += 15 # Padr√£o que "chama" um empate
        if dados[-1] == 'V' and dados[-2] == 'E' and dados[-3] == 'V': # VEV
            tendencia_score += 15 # Padr√£o que "chama" um empate

    # Ajustar a frequ√™ncia de empate com base na tend√™ncia
    # Limitar o score da tend√™ncia para n√£o distorcer muito
    tendencia_score_ajustado = max(-20, min(tendencia_score, 20)) # Limita a -20 a +20

    chance_final = frequencia_empate + tendencia_score_ajustado
    chance_final = max(0, min(chance_final, 100)) # Garante que fique entre 0 e 100

    return round(chance_final, 2), "An√°lise estat√≠stica e de tend√™ncia conclu√≠da."


# --- Interface com o usu√°rio ---
st.set_page_config(page_title="Football Studio HS (Estat√≠stico)", layout="centered", page_icon="‚öΩ")
st.title("‚öΩ Inserir Resultado ao Vivo (Football Studio HS)")

# Inicializa√ß√£o do hist√≥rico
if "historico" not in st.session_state:
    st.session_state.historico = []

st.markdown("---") # Separador visual

col1, col2 = st.columns([0.6, 0.4])

with col1:
    st.subheader("Registrar Novo Resultado:")
    opcao = st.radio("Resultado da rodada:", ["üè† Casa", "ü§ù Empate", "‚úàÔ∏è Visitante"], horizontal=True, key="radio_opcao")

with col2:
    st.markdown("<br>", unsafe_allow_html=True) # Espa√ßamento para alinhar o bot√£o
    resultado_map = {"üè† Casa": "C", "‚úàÔ∏è Visitante": "V", "ü§ù Empate": "E"}
    resultado = resultado_map[opcao]
    if st.button("‚ûï Inserir Resultado", key="btn_inserir"):
        st.session_state.historico.append(resultado)
        st.success(f"Resultado '{opcao}' inserido!")


st.markdown("---") # Separador visual

st.subheader("üìú Hist√≥rico Recente:")
# Visualiza√ß√£o do hist√≥rico melhorada
hist_recente = st.session_state.historico[-30:] # √öltimos 30 resultados
if hist_recente:
    # Dividir em linhas de 10
    num_cols = 10
    for i in range(0, len(hist_recente), num_cols):
        colunas_display = st.columns(num_cols)
        for j, res in enumerate(hist_recente[i:i+num_cols]):
            cor_fundo = ""
            if res == 'C':
                cor_fundo = "background-color:#E6FFE6; border-radius:5px; padding:2px;" # Verde claro
            elif res == 'V':
                cor_fundo = "background-color:#E0F2F7; border-radius:5px; padding:2px;" # Azul claro
            elif res == 'E':
                cor_fundo = "background-color:#FFFACD; border-radius:5px; padding:2px;" # Amarelo claro

            with colunas_display[j]:
                st.markdown(f"<div style='{cor_fundo}; text-align:center;'><b>{res}</b></div>", unsafe_allow_html=True)
else:
    st.info("Nenhum resultado inserido ainda. Comece a adicionar resultados para ver o hist√≥rico.")

st.markdown("---") # Separador visual

st.subheader("üìä An√°lise Inteligente (Estat√≠stica):")

padroes, sugestao, confianca = detectar_padroes_inteligente(st.session_state.historico)
if padroes:
    st.success(f"üîç **Padr√µes encontrados:** {', '.join(padroes)}")
else:
    st.info("Nenhum padr√£o repetitivo significativo identificado at√© agora.")

st.markdown("### üé≤ Previs√£o de Empate (Estat√≠stica)")
chance_empate, msg_prev = prever_empate_estatistico(st.session_state.historico)

if chance_empate > 0.0 or "muito curto" not in msg_prev: # Mostra a chance mesmo que seja 0% se houver dados
    st.write(f"üìà Chance de empate na pr√≥xima rodada: **{chance_empate:.2f}%**")
    if chance_empate >= 65: # Limiares ajustados para a nova l√≥gica
        st.success("Chance alta de empate!")
    elif chance_empate >= 40:
        st.info("Chance moderada de empate.")
    else:
        st.warning("Chance baixa de empate.")
else:
    st.warning(f"N√£o foi poss√≠vel gerar uma previs√£o de empate: {msg_prev}")


if sugestao:
    cor_map = {"C": "Casa", "V": "Visitante", "E": "Empate"}
    sugestao_nome = cor_map.get(sugestao, "Desconhecido")
    st.markdown(f"üîÆ **Recomenda√ß√£o de Padr√£o:** O pr√≥ximo resultado mais prov√°vel, com base em padr√µes, √© **{sugestao_nome}** (Confiabilidade: {round(confianca*100, 1)}%)")
    if confianca * 100 > 60:
        st.success("Padr√£o forte detectado para esta recomenda√ß√£o.")
    elif confianca * 100 > 40:
        st.info("Padr√£o moderado para esta recomenda√ß√£o.")
    else:
        st.warning("Padr√£o fraco para esta recomenda√ß√£o.")
else:
    st.warning("Poucos dados ou nenhum padr√£o claro para uma recomenda√ß√£o baseada em padr√µes.")

st.markdown("---")
if st.button("üîÑ Limpar Hist√≥rico", key="btn_limpar"):
    st.session_state.historico = []
    st.experimental_rerun() # Reinicia o app para refletir a limpeza
